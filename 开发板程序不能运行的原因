1、程序烧入有误（内存地址出错）

2、没有上电

4、编译工具链的版本问题

5、缺少相应的库

6、内核的版本与可执行程序的版本不一致
不同的版本，库的路径可能不一样，所以可能出错

7、复位异常，程序指针没有指向对应位置
BIOS都不能启动
先启动BIOS再启动内核

动态加载器：将Flash上的程序加载到RAM里

8、Flash有坏块，烧的时候是好的，但是烧完就坏了（小概率）

9、CPU的指令集（X86）与开发板的指令集（ARM）不一样
一般不可能
因为，会进行交叉编译

开发的第一件事：建立交叉编译环境

从计算机的最基本的角度出发来看待问题
以上问题，都是从计算机基本原理找出来的


10、PC机上的库比较齐全，开发板上的库缺了
缺什么库，就拷什么

缺的多，把嵌入式的根文件系统重做

根文件系统：最底层的文件系统

动态编译：打印的是一条路径（版本不同，解析出来的路径可能不一样）
静态编译：打印的是源码

11、堆栈溢出
80C51单片机，有可能会
一开始要设置SP指针，一般设置为60FH或者67FH
局部变量保存在堆栈,所以少调用子程序

12、内存不够用（RAM）
将全局变量改为局部变量

13、Flash溢出
烧入溢出
Flash：程序从PC到开发板的ROM的缓冲区

14、CPU的主频设置不够好
初始化程序设置CPU频率，CPU与外设频率的比率
主频过高超过了Flash支持的最高频率

主频设置不高，CPU一开的主频来自外部晶振，通过倍频器，慢慢加上去，而倍频频率过高
倍频倍率合适，也有可能出错，因为从倍频开始到主频稳定，有个时间，在这段时间内不能做任何操作


15、
CPU上电后，会有默认值，在main函数之前，要对CPU进行初始化，所以一定要将CPU的管脚按照说明书置为合适的值

16、大小端模式设置有问题
PC编译器：大端模式
开发板：小段模式
通过CPU的管脚设置大小端模式，一般由焊接人员设置

17、程序实际已经正确运行了但是看起来没有
电流过小，现象不明显

主要原因：
1、两个系统的目录结构不一样，路径不对，例如：PC（user/lib），ARM（HOME/lib）
2、缺库路径对了，进了lib，里面没有这个文件

从编译器的可执行角度去理解

做根系统时，c库不完整，如果足够就把c库全拷过去
