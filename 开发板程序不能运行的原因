1、程序烧入有误（内存地址出错）

2、没有上电

4、编译工具链的版本问题

5、缺少相应的库

6、内核的版本与可执行程序的版本不一致
不同的版本，库的路径可能不一样，所以可能出错

7、复位异常，程序指针没有指向对应位置
BIOS都不能启动
先启动BIOS再启动内核

动态加载器：将Flash上的程序加载到RAM里

8、Flash有坏块，烧的时候是好的，但是烧完就坏了（小概率）

9、CPU的指令集（X86）与开发板的指令集（ARM）不一样
一般不可能
因为，会进行交叉编译

开发的第一件事：建立交叉编译环境

从计算机的最基本的角度出发来看待问题
以上问题，都是从计算机基本原理找出来的


10、PC机上的库比较齐全，开发板上的库缺了
缺什么库，就拷什么

缺的多，把嵌入式的根文件系统重做

根文件系统：最底层的文件系统

动态编译：打印的是一条路径（版本不同，解析出来的路径可能不一样）
静态编译：打印的是源码


主要原因：
1、两个系统的目录结构不一样，路径不对，例如：PC（user/lib），ARM（HOME/lib）
2、缺库路径对了，进了lib，里面没有这个文件

从编译器的可执行角度去理解

做根系统时，c库不完整，如果足够就把c库全拷过去
